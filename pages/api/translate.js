// pages/api/translate.js

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Only POST requests are allowed" });
  }

  const { textToTranslate, prompt: translationPrompt } = req.body;

  if (!textToTranslate || textToTranslate.trim() === "") {
    return res.status(400).json({ result: "Ã‡evrilecek metin belirtilmedi." });
  }

  let translatedText = "";
  let analysisResult = []; // analysisResult'Ä± baÅŸlangÄ±Ã§ta boÅŸ dizi yapalÄ±m

  try {
    // AdÄ±m 1: Ä°ngilizce metni TÃ¼rkÃ§e'ye Ã§evir
    const translateResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [{ role: "user", content: `${translationPrompt}\n\n${textToTranslate}` }],
        temperature: 0.3,
      }),
    });

    const translateData = await translateResponse.json();
    translatedText = translateData.choices?.[0]?.message?.content || "Ã‡eviri alÄ±namadÄ±.";

    // Hukuki analiz iÃ§in kullanÄ±lacak prompt (Markdown biÃ§imlendirmeleri kaldÄ±rÄ±ldÄ±)
    const analysisPrompt = `
      AÅŸaÄŸÄ±daki sÃ¶zleÅŸme metnindeki her bir maddeyi ayrÄ± ayrÄ± analiz ederek, TÃ¼rk Hukuku mevzuatÄ±na gÃ¶re uygunluÄŸunu, risklerini veya geÃ§ersizliÄŸini deÄŸerlendir.
      Her bir madde iÃ§in aÅŸaÄŸÄ±daki JSON objesi formatÄ±nda bir Ã§Ä±ktÄ± oluÅŸtur ve tÃ¼m bu objeleri bir JSON dizisi (array) iÃ§ine al.
      Sadece JSON Ã§Ä±ktÄ±sÄ± dÃ¶ndÃ¼r, JSON dÄ±ÅŸÄ±nda hiÃ§bir aÃ§Ä±klama, giriÅŸ veya Ã§Ä±kÄ±ÅŸ cÃ¼mlesi ekleme.

      JSON Objesi YapÄ±sÄ±:
      {
        "maddeNo": [madde numarasÄ±, Ã¶rn: 1],
        "maddeBaslik": [varsa maddenin baÅŸlÄ±ÄŸÄ±, yoksa boÅŸ string],
        "maddeIcerigi": [maddenin tam metni],
        "hukukiDegerlendirme": [Maddenin hukuki anlamÄ±nÄ±, olasÄ± risklerini, hukuka uygunluÄŸunu veya aykÄ±rÄ±lÄ±ÄŸÄ±nÄ± detaylÄ±ca aÃ§Ä±kla. TÃ¼rk Hukukundaki yerini ve pratikteki sonuÃ§larÄ±nÄ± yorumla.],
        "uygunlukEtiketi": ["âœ… Uygun Madde", "ğŸŸ¡ Riskli Madde", "ğŸ”´ GeÃ§ersiz Madde" etiketlerinden biri],
        "gerekce": [Etiketi neden seÃ§tiÄŸini, hukuki argÃ¼manlarla ve net bir dille aÃ§Ä±kla.],
        "kanuniDayanak": [Ä°lgili Kanun/Madde (Ã¶rn: TÃ¼rk BorÃ§lar Kanunu m. 27), veya "Kanuni Dayanak Belirlenemedi" veya "SÃ¶zleÅŸme Serbestisi Ä°lkesi" gibi genel ilkeler],
        "yargiKarariOzeti": [Ä°lgili YargÄ±tay/DanÄ±ÅŸtay kararÄ± Ã¶zeti ve numarasÄ±/tarihi. Yoksa "Ä°lgili yargÄ± kararÄ± bulunamadÄ±."],
        "onerilenRevizeMadde": [Riskli veya GeÃ§ersiz ise TÃ¼rk hukukuna uygun revize edilmiÅŸ madde metni. Uygunsa "Revize gerekmiyor."]
      }

      Ã–nemli Kurallar:
      1. Kanuni dayanaklarÄ± doÄŸru, spesifik ve tam olarak belirt. Emin deÄŸilsen genel ilke veya "Kanuni Dayanak Belirlenemedi" kullan.
      2. uygunlukEtiketi iÃ§in yalnÄ±zca yukarÄ±daki 3 etiketi kullan.
      3. Ã‡Ä±ktÄ±nÄ±n tamamen geÃ§erli bir JSON dizisi olduÄŸundan emin ol.
      4. Analiz edilecek metin:
      `;

    // AdÄ±m 2: Ã‡evrilen TÃ¼rkÃ§e metni analiz et
    const analyzeResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: "Sen bir hukuk uzmanÄ±sÄ±n. KullanÄ±cÄ±nÄ±n verdiÄŸi sÃ¶zleÅŸme metnini maddelere ayÄ±rarak, her bir maddeyi TÃ¼rk Hukuku'na gÃ¶re detaylÄ±ca analiz et. Ã‡Ä±ktÄ±yÄ± kesinlikle belirtilen JSON formatÄ±nda ve sadece JSON olarak ver. JSON dÄ±ÅŸÄ±na hiÃ§bir karakter veya metin ekleme."
          },
          { role: "user", content: `${analysisPrompt}\n${translatedText}` } // Prompt ile metni birleÅŸtir
        ],
        temperature: 0.2, // Analizde daha tutarlÄ± ve kesin yanÄ±tlar iÃ§in sÄ±caklÄ±ÄŸÄ± biraz daha dÃ¼ÅŸÃ¼rdÃ¼k
        response_format: { type: "json_object" } // Modelden doÄŸrudan JSON objesi istiyoruz
      }),
    });

    const analyzeData = await analyzeResponse.json();

    try {
        let rawAnalysisContent = analyzeData.choices?.[0]?.message?.content;

        if (typeof rawAnalysisContent === 'string') {
            analysisResult = JSON.parse(rawAnalysisContent);
        } else if (typeof rawAnalysisContent === 'object' && rawAnalysisContent !== null) {
            analysisResult = rawAnalysisContent;
        } else {
            analysisResult = [];
            console.warn("Modelden gelen analiz sonucu beklenen formatta deÄŸil (boÅŸ/tanÄ±msÄ±z):", rawAnalysisContent);
        }

        if (!Array.isArray(analysisResult)) {
            if (typeof analysisResult === 'object' && analysisResult !== null && Object.keys(analysisResult).length > 0) {
                analysisResult = [analysisResult];
            } else {
                analysisResult = [];
            }
        }

    } catch (parseError) {
        console.error("Analiz sonucu ayrÄ±ÅŸtÄ±rÄ±lÄ±rken veya iÅŸlenirken hata:", parseError);
        analysisResult = [];
    }
    
    res.status(200).json({ translatedText, analysisResult });

  } catch (error) {
    console.error("Backend genel hata:", error);
    res.status(500).json({ error: "Sunucu hatasÄ±: " + error.message });
  }
}