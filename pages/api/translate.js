// pages/api/translate.js

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Only POST requests are allowed" });
  }

  const { textToTranslate, prompt: translationPrompt } = req.body;

  if (!textToTranslate || textToTranslate.trim() === "") {
    return res.status(400).json({ result: "Ã‡evrilecek metin belirtilmedi." });
  }

  let translatedText = "";
  let analysisResult = [];

  try {
    // AdÄ±m 1: Ä°ngilizce metni TÃ¼rkÃ§e'ye Ã§evir
    const translateResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [{ role: "user", content: `${translationPrompt}\n\n${textToTranslate}` }],
        temperature: 0.3,
      }),
    });

    const translateData = await translateResponse.json();
    translatedText = translateData.choices?.[0]?.message?.content || "Ã‡eviri alÄ±namadÄ±.";

    // Hukuki analiz iÃ§in kullanÄ±lacak prompt (En son ve en agresif hali)
    const analysisPrompt = `
      Sen, sÃ¶zleÅŸme maddelerini TÃ¼rk Hukuku'na gÃ¶re detaylÄ±ca analiz eden bir uzmansÄ±n.
      AÅŸaÄŸÄ±daki sÃ¶zleÅŸme metnini her bir "Madde X" veya benzeri ifadeyi ayrÄ± bir madde olarak kabul ederek **tek tek ve tam metinleriyle analiz et.**
      Analiz sonucunu, her bir maddenin aÅŸaÄŸÄ±daki kesin JSON objesi formatÄ±nda olduÄŸu bir JSON dizisi (array) olarak dÃ¶ndÃ¼r.
      
      **Ã‡ok Ã–nemli Kurallar:**
      1. Ã‡Ä±ktÄ±, **sadece ve sadece geÃ§erli bir JSON dizisi olmalÄ±.** JSON dÄ±ÅŸÄ±nda hiÃ§bir harf, sayÄ±, kelime, cÃ¼mle, baÅŸlÄ±k veya aÃ§Ä±klama ekleme.
      2. JSON iÃ§indeki tÃ¼m metin alanlarÄ± (maddeIcerigi, hukukiDegerlendirme, gerekce, yargiKarariOzeti, onerilenRevizeMadde), **mantÄ±klÄ± ve okunabilir satÄ±r sonlarÄ± (\\n) iÃ§ermeli.** Bu, metinlerin daha dÃ¼zgÃ¼n gÃ¶rÃ¼nmesini saÄŸlayacak.
      3. Her maddeyi ayrÄ± bir JSON objesi olarak iÅŸle. Metindeki tÃ¼m maddeler JSON Ã§Ä±ktÄ±sÄ±nda yer almalÄ±.
      4. Kanuni Dayanak iÃ§in: DoÄŸru, spesifik ve tam kanun maddesi (Ã¶rn: TÃ¼rk BorÃ§lar Kanunu m. 27). Emin deÄŸilsen "Kanuni Dayanak Belirlenemedi" veya ilgili hukuki ilke (Ã¶rn: SÃ¶zleÅŸme Serbestisi Ä°lkesi) kullan. Asla yanlÄ±ÅŸ madde verme.
      5. Uygunluk Etiketi iÃ§in sadece: "âœ… Uygun Madde", "ğŸŸ¡ Riskli Madde", "ğŸ”´ GeÃ§ersiz Madde" etiketlerinden birini kullan.

      **JSON Objesi YapÄ±sÄ±:**
      {
        "maddeNo": [madde numarasÄ±, Ã¶rn: 1 veya string olarak "Hizmet SÃ¶zleÅŸmesi"],
        "maddeBaslik": [varsa maddenin baÅŸlÄ±ÄŸÄ±, yoksa boÅŸ string],
        "maddeIcerigi": [maddenin tam metni ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
        "hukukiDegerlendirme": [DetaylÄ± hukuki deÄŸerlendirme ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
        "uygunlukEtiketi": ["âœ… Uygun Madde", "ğŸŸ¡ Riskli Madde", "ğŸ”´ GeÃ§ersiz Madde" etiketlerinden biri],
        "gerekce": [GerekÃ§e ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
        "kanuniDayanak": [Ä°lgili Kanun/Madde (Ã¶rn: TÃ¼rk BorÃ§lar Kanunu m. 27), veya "Kanuni Dayanak Belirlenemedi" veya "SÃ¶zleÅŸme Serbestisi Ä°lkesi" gibi genel ilkeler],
        "yargiKarariOzeti": [Ä°lgili YargÄ±tay/DanÄ±ÅŸtay kararÄ± Ã¶zeti ve numarasÄ±/tarihi. Yoksa "Ä°lgili yargÄ± kararÄ± bulunamadÄ±." ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
        "onerilenRevizeMadde": [Riskli veya GeÃ§ersiz ise TÃ¼rk hukukuna uygun revize edilmiÅŸ madde metni. Uygunsa "Revize gerekmiyor." ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±]
      }

      Analiz edilecek sÃ¶zleÅŸme metni:
      `;

    // AdÄ±m 2: Ã‡evrilen TÃ¼rkÃ§e metni analiz et
    const analyzeResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: "Senin gÃ¶revin, kullanÄ±cÄ±nÄ±n verdiÄŸi sÃ¶zleÅŸme metnini maddelere ayÄ±rarak, her bir maddeyi TÃ¼rk Hukuku'na gÃ¶re detaylÄ±ca analiz etmek ve Ã§Ä±ktÄ±yÄ± kesinlikle belirtilen JSON formatÄ±nda, hiÃ§bir ek karakter veya metin olmadan dÃ¶ndÃ¼rmektir."
          },
          { role: "user", content: `${analysisPrompt}\n${translatedText}` }
        ],
        temperature: 0.2,
        response_format: { type: "json_object" }
      }),
    });

    const analyzeData = await analyzeResponse.json();

    try {
        let rawAnalysisContent = analyzeData.choices?.[0]?.message?.content;

        if (typeof rawAnalysisContent === 'string') {
            analysisResult = JSON.parse(rawAnalysisContent);
        } else if (typeof rawAnalysisContent === 'object' && rawAnalysisContent !== null) {
            analysisResult = rawAnalysisContent;
        } else {
            analysisResult = [];
            console.warn("Modelden gelen analiz sonucu beklenen formatta deÄŸil (boÅŸ/tanÄ±msÄ±z):", rawAnalysisContent);
        }

        // Gelen JSON'un bir dizi olduÄŸundan emin olalÄ±m.
        // EÄŸer model tek bir obje dÃ¶ndÃ¼rÃ¼rse, onu diziye saralÄ±m.
        if (!Array.isArray(analysisResult)) {
            if (typeof analysisResult === 'object' && analysisResult !== null && Object.keys(analysisResult).length > 0) {
                analysisResult = [analysisResult];
            } else {
                analysisResult = [];
            }
        }

    } catch (parseError) {
        console.error("Analiz sonucu ayrÄ±ÅŸtÄ±rÄ±lÄ±rken veya iÅŸlenirken hata:", parseError);
        analysisResult = [];
    }
    
    res.status(200).json({ translatedText, analysisResult });

  } catch (error) {
    console.error("Backend genel hata:", error);
    res.status(500).json({ error: "Sunucu hatasÄ±: " + error.message });
  }
}