// pages/api/analyze.js

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Only POST requests are allowed" });
  }

  const { contractText } = req.body;

  if (!contractText || contractText.trim() === "") {
    return res.status(400).json({ error: "SÃ¶zleÅŸme metni belirtilmedi." });
  }

  let analysisResult = [];

  try {
    const analysisPrompt = `
      Sen Ã§ok yetenekli, TÃ¼rk Hukuku konusunda uzman ve Ã§Ã¶zÃ¼m odaklÄ± bir yapay zeka hukuk danÄ±ÅŸmanÄ±sÄ±n.
      AÅŸaÄŸÄ±da sana verilen sÃ¶zleÅŸme metnini dikkatlice oku. Metindeki her bir "Madde X" (Ã¶rneÄŸin "Madde 1", "Madde 2" gibi) ifadesini ayrÄ± bir sÃ¶zleÅŸme maddesi olarak tanÄ±mla.
      
      Her bir tespit ettiÄŸin sÃ¶zleÅŸme maddesini tek tek, ayrÄ±ntÄ±lÄ± ve objektif bir ÅŸekilde TÃ¼rk Hukuku mevzuatÄ±na gÃ¶re analiz et.
      
      Analiz sonucunu, her bir maddenin aÅŸaÄŸÄ±daki kesin JSON objesi formatÄ±nda olduÄŸu bir JSON dizisi (array) olarak dÃ¶ndÃ¼r.
      
      **Ã‡ok Ã–nemli Ã‡Ä±ktÄ± KurallarÄ±:**
      1. Ã‡Ä±ktÄ±n, **sadece ve sadece geÃ§erli bir JSON dizisi olmalÄ±.** JSON dÄ±ÅŸÄ±nda hiÃ§bir ekstra metin, aÃ§Ä±klama, baÅŸlÄ±k veya giriÅŸ/Ã§Ä±kÄ±ÅŸ cÃ¼mlesi ekleme.
      2. JSON iÃ§indeki tÃ¼m metin alanlarÄ± (yani "maddeIcerigi", "hukukiDegerlendirme", "gerekce", "yargiKarariOzeti", "onerilenRevizeMadde"), **okunabilirliÄŸi artÄ±rmak iÃ§in iÃ§erisinde mantÄ±klÄ± ve doÄŸal satÄ±r sonlarÄ± (\\n karakteri) iÃ§ermeli.**
      3. **TÃ¼m maddeler analiz edilmeli:** Metinde kaÃ§ madde varsa (Madde 1'den sona kadar), her biri iÃ§in ayrÄ± bir JSON objesi oluÅŸturulmalÄ± ve bu dizinin iÃ§inde yer almalÄ±. Asla sadece ilk maddeyi analiz etme.
      4. "maddeNo" alanÄ± iÃ§in, metindeki madde numarasÄ±nÄ± kullan. EÄŸer belirli bir madde numarasÄ± yoksa, iÃ§eriÄŸe gÃ¶re uygun bir tanÄ±mlayÄ±cÄ± kullanabilirsin (Ã¶rneÄŸin "GiriÅŸ", "TanÄ±mlar" gibi).
      5. "Kanuni Dayanak" iÃ§in: DoÄŸru, spesifik ve tam kanun maddesi (Ã¶rn: TÃ¼rk BorÃ§lar Kanunu m. 27). EÄŸer kesin ve doÄŸrudan ilgili bir kanun maddesi bulamÄ±yorsan veya emin deÄŸilsen, asla yanlÄ±ÅŸ veya alakasÄ±z bir madde numarasÄ± verme. Bunun yerine:
         - "Kanuni Dayanak Belirlenemedi" ÅŸeklinde belirt. VEYA
         - Ä°lgili genel hukuki ilkeyi (Ã¶rneÄŸin: "SÃ¶zleÅŸme Serbestisi Ä°lkesi", "DÃ¼rÃ¼stlÃ¼k KuralÄ±") VEYA
         - Ä°lgili kanuni Ã§erÃ§eveyi (Ã¶rneÄŸin: "TÃ¼rk BorÃ§lar Kanunu Genel HÃ¼kÃ¼mleri", "TÃ¼rk Ticaret Kanunu Genel HÃ¼kÃ¼mleri") belirt.
      6. "Uygunluk Etiketi" iÃ§in sadece bu 3 etiketten birini kullan: "âœ… Uygun Madde", "ğŸŸ¡ Riskli Madde", "ğŸ”´ GeÃ§ersiz Madde".

      **JSON Objesi YapÄ±sÄ± (Her madde iÃ§in bir obje dizisi olarak):**
      [
        {
          "maddeNo": [madde numarasÄ± veya tanÄ±mlayÄ±cÄ±, Ã¶rn: 1],
          "maddeBaslik": [varsa maddenin baÅŸlÄ±ÄŸÄ±, yoksa boÅŸ string],
          "maddeIcerigi": [maddenin tam metni ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
          "hukukiDegerlendirme": [DetaylÄ± hukuki deÄŸerlendirme ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
          "uygunlukEtiketi": ["âœ… Uygun Madde"],
          "gerekce": [Etiketi neden seÃ§tiÄŸini, hukuki argÃ¼manlarla ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
          "kanuniDayanak": [Ä°lgili Kanun/Madde veya "Kanuni Dayanak Belirlenemedi"],
          "yargiKarariOzeti": [Ä°lgili YargÄ±tay/DanÄ±ÅŸtay kararÄ± Ã¶zeti ve numarasÄ±/tarihi. Yoksa "Ä°lgili yargÄ± kararÄ± bulunamadÄ±." ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
          "onerilenRevizeMadde": [Riskli veya GeÃ§ersiz ise TÃ¼rk hukukuna uygun revize edilmiÅŸ madde metni. Uygunsa "Revize gerekmiyor." ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±]
        }
        // ... DiÄŸer maddeler de bu formatta devam edecek
      ]

      Analiz edilecek sÃ¶zleÅŸme metni:
      ${contractText}
      `;

    const analyzeResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o", // En gÃ¼ncel ve yetenekli model
        messages: [
          {
            role: "system",
            content: "Senin gÃ¶revin, kullanÄ±cÄ±nÄ±n verdiÄŸi sÃ¶zleÅŸme metnini maddelere ayÄ±rarak, her bir maddeyi TÃ¼rk Hukuku'na gÃ¶re detaylÄ±ca analiz etmek ve Ã§Ä±ktÄ±yÄ± kesinlikle belirtilen JSON formatÄ±nda, hiÃ§bir ek karakter veya metin olmadan dÃ¶ndÃ¼rmektir. JSON iÃ§indeki tÃ¼m metin alanlarÄ±nda satÄ±r sonlarÄ± iÃ§in \\n kullan."
          },
          { role: "user", content: analysisPrompt }
        ],
        temperature: 0.2, // TutarlÄ± JSON Ã§Ä±ktÄ±sÄ± iÃ§in dÃ¼ÅŸÃ¼k sÄ±caklÄ±k
        response_format: { type: "json_object" } // KRÄ°TÄ°K: Modelden JSON obje dÃ¶ndÃ¼rmesini istiyoruz
      }),
    });

    const data = await analyzeResponse.json();

    if (data.error) {
      console.error("OpenAI API HatasÄ±:", data.error);
      return res.status(data.error.status || 500).json({ error: data.error.message || "OpenAI API'den beklenmeyen bir hata alÄ±ndÄ±." });
    }

    let rawAnalysisContent = data.choices?.[0]?.message?.content;
    let finalAnalysisResult = []; // API'den gelecek analysisResult iÃ§in yeni deÄŸiÅŸken

    try {
        if (typeof rawAnalysisContent === 'string') {
            finalAnalysisResult = JSON.parse(rawAnalysisContent);
        } else if (typeof rawAnalysisContent === 'object' && rawAnalysisContent !== null) {
            finalAnalysisResult = rawAnalysisContent;
        } else {
            console.warn("Modelden gelen analiz sonucu beklenen formatta deÄŸil (boÅŸ/tanÄ±msÄ±z):", rawAnalysisContent);
        }

        // GÃ¼venlik kontrolÃ¼: EÄŸer analysisResult dizi deÄŸilse veya boÅŸsa, boÅŸ dizi ata
        if (!Array.isArray(finalAnalysisResult)) {
            if (typeof finalAnalysisResult === 'object' && finalAnalysisResult !== null && Object.keys(finalAnalysisResult).length > 0) {
                finalAnalysisResult = [finalAnalysisResult]; 
            } else {
                finalAnalysisResult = [];
            }
        }

    } catch (parseError) {
        console.error("Analiz sonucu JSON olarak ayrÄ±ÅŸtÄ±rÄ±lamadÄ± veya iÅŸlenirken hata:", parseError);
        return res.status(500).json({ error: "Analiz yanÄ±tÄ± iÅŸlenirken bir sorun oluÅŸtu." });
    }
    
    // YalnÄ±zca analiz sonucunu dÃ¶ndÃ¼r
    res.status(200).json({ analysisResult: finalAnalysisResult });

  } catch (error) {
    console.error("Genel sunucu hatasÄ±:", error);
    res.status(500).json({ error: "Sunucu hatasÄ±: " + error.message });
  }
}