// pages/api/analyze.js

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Only POST requests are allowed" });
  }

  const { contractText } = req.body;

  if (!contractText || contractText.trim() === "") {
    return res.status(400).json({ error: "SÃ¶zleÅŸme metni belirtilmedi." }); // Hata mesajÄ± formatÄ±nÄ± tutarlÄ± yapalÄ±m
  }

  let analysisResult = []; // BaÅŸlangÄ±Ã§ta boÅŸ bir dizi olarak ayarlandÄ±

  try {
    // Hukuki analiz iÃ§in kullanÄ±lacak prompt
    const prompt = `
      Sen TÃ¼rk Hukuku konusunda uzman, Ã§Ã¶zÃ¼m odaklÄ± bir yapay zeka hukuk danÄ±ÅŸmanÄ±sÄ±n.
      AÅŸaÄŸÄ±da verilen sÃ¶zleÅŸme metnindeki her bir "Madde X" veya benzeri ifadeyi ayrÄ± bir madde olarak kabul ederek tek tek ve tam metinleriyle analiz et.
      Analiz sonucunu, her bir maddenin aÅŸaÄŸÄ±daki kesin JSON objesi formatÄ±nda olduÄŸu bir JSON dizisi (array) olarak dÃ¶ndÃ¼r.
      
      **Ã‡ok Ã–nemli Kurallar:**
      1. Ã‡Ä±ktÄ±, **sadece ve sadece geÃ§erli bir JSON dizisi olmalÄ±.** JSON dÄ±ÅŸÄ±nda hiÃ§bir harf, sayÄ±, kelime, cÃ¼mle, baÅŸlÄ±k veya aÃ§Ä±klama ekleme.
      2. JSON iÃ§indeki tÃ¼m metin alanlarÄ± ("maddeIcerigi", "hukukiDegerlendirme", "gerekce", "yargiKarariOzeti", "onerilenRevizeMadde"), **mantÄ±klÄ± ve okunabilir satÄ±r sonlarÄ± (\\n) iÃ§ermeli.** Bu, metinlerin daha dÃ¼zgÃ¼n gÃ¶rÃ¼nmesini saÄŸlayacak.
      3. Her maddeyi ayrÄ± bir JSON objesi olarak iÅŸle. Metindeki tÃ¼m maddeler JSON Ã§Ä±ktÄ±sÄ±nda yer almalÄ±.
      4. Kanuni Dayanak iÃ§in: DoÄŸru, spesifik ve tam kanun maddesi (Ã¶rn: TÃ¼rk BorÃ§lar Kanunu m. 27). Emin deÄŸilsen "Kanuni Dayanak Belirlenemedi" veya ilgili hukuki ilke (Ã¶rn: SÃ¶zleÅŸme Serbestisi Ä°lkesi) kullan. Asla yanlÄ±ÅŸ madde verme.
      5. Uygunluk Etiketi iÃ§in sadece: "âœ… Uygun Madde", "ğŸŸ¡ Riskli Madde", "ğŸ”´ GeÃ§ersiz Madde" etiketlerinden birini kullan.

      **JSON Objesi YapÄ±sÄ± (Her madde iÃ§in bir obje):**
      [
        {
          "maddeNo": [madde numarasÄ±, Ã¶rn: 1 veya string olarak "GiriÅŸ"],
          "maddeBaslik": [varsa maddenin baÅŸlÄ±ÄŸÄ±, yoksa boÅŸ string],
          "maddeIcerigi": [maddenin tam metni ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
          "hukukiDegerlendirme": [DetaylÄ± hukuki deÄŸerlendirme ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
          "uygunlukEtiketi": ["âœ… Uygun Madde"],
          "gerekce": [GerekÃ§e ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
          "kanuniDayanak": [Ä°lgili Kanun/Madde (Ã¶rn: TÃ¼rk BorÃ§lar Kanunu m. 27), veya "Kanuni Dayanak Belirlenemedi"],
          "yargiKarariOzeti": [Ä°lgili YargÄ±tay/DanÄ±ÅŸtay kararÄ± Ã¶zeti ve numarasÄ±/tarihi. Yoksa "Ä°lgili yargÄ± kararÄ± bulunamadÄ±." ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±],
          "onerilenRevizeMadde": [Riskli veya GeÃ§ersiz ise TÃ¼rk hukukuna uygun revize edilmiÅŸ madde metni. Uygunsa "Revize gerekmiyor." ve iÃ§inde satÄ±r sonlarÄ± olmalÄ±]
        },
        // DiÄŸer maddeler buraya gelecek
      ]

      Analiz edilecek sÃ¶zleÅŸme metni:
      `;

    const fullPrompt = `${prompt}\n\n${contractText}`;

    const analyzeResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o", // Daha yeni ve iyi performanslÄ± model
        messages: [
          {
            role: "system",
            content: "Senin gÃ¶revin, kullanÄ±cÄ±nÄ±n verdiÄŸi sÃ¶zleÅŸme metnini maddelere ayÄ±rarak, her bir maddeyi TÃ¼rk Hukuku'na gÃ¶re detaylÄ±ca analiz etmek ve Ã§Ä±ktÄ±yÄ± kesinlikle belirtilen JSON formatÄ±nda, hiÃ§bir ek karakter veya metin olmadan dÃ¶ndÃ¼rmektir."
          },
          { role: "user", content: fullPrompt }
        ],
        temperature: 0.2, // TutarlÄ± JSON Ã§Ä±ktÄ±sÄ± iÃ§in dÃ¼ÅŸÃ¼k sÄ±caklÄ±k
        response_format: { type: "json_object" } // KRÄ°TÄ°K: Modelden JSON obje dÃ¶ndÃ¼rmesini istiyoruz
      }),
    });

    const data = await analyzeResponse.json();

    // Modelin direkt JSON obje dÃ¶ndÃ¼rmesi beklendiÄŸi iÃ§in data.choices[0].message.content
    // zaten parse edilmiÅŸ bir JS objesi/array'i olmalÄ±.
    // Ancak yine de hata ihtimaline karÅŸÄ± kontrol edelim.
    let rawAnalysisContent = data.choices?.[0]?.message?.content;

    try {
        if (typeof rawAnalysisContent === 'string') {
            // Nadiren de olsa model hala string dÃ¶ndÃ¼rebilir, bu durumda parse etmeyi deneyelim.
            analysisResult = JSON.parse(rawAnalysisContent);
        } else if (typeof rawAnalysisContent === 'object' && rawAnalysisContent !== null) {
            // Ã‡oÄŸu durumda buraya dÃ¼ÅŸmeli, doÄŸrudan obje olarak gelmeli.
            analysisResult = rawAnalysisContent;
        } else {
            // EÄŸer boÅŸ veya tanÄ±msÄ±z geldiyse, boÅŸ bir dizi ata.
            analysisResult = [];
            console.warn("Modelden gelen analiz sonucu beklenen formatta deÄŸil (boÅŸ/tanÄ±msÄ±z):", rawAnalysisContent);
        }

        // Gelen JSON'un bir dizi olduÄŸundan emin olalÄ±m.
        // EÄŸer tek bir obje geldiyse (bazen model Ã¶yle dÃ¶nebiliyor), onu bir diziye saralÄ±m.
        if (!Array.isArray(analysisResult)) {
            if (typeof analysisResult === 'object' && analysisResult !== null && Object.keys(analysisResult).length > 0) {
                // EÄŸer tek bir madde analizi objesi geldiyse, onu diziye dÃ¶nÃ¼ÅŸtÃ¼r.
                analysisResult = [analysisResult]; 
            } else {
                analysisResult = []; // Hala bir dizi deÄŸilse, boÅŸ dizi ata
            }
        }

    } catch (parseError) {
        console.error("Analiz sonucu JSON olarak ayrÄ±ÅŸtÄ±rÄ±lamadÄ± veya iÅŸlenirken hata:", parseError);
        analysisResult = []; // Hata durumunda boÅŸ array ata
    }
    
    // Frontend'in beklediÄŸi formatta analysisResult'Ä± gÃ¶nder
    res.status(200).json({ analysisResult });

  } catch (error) {
    console.error("Backend genel hata:", error);
    res.status(500).json({ error: "Sunucu hatasÄ±: " + error.message });
  }
}