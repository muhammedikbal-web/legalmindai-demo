// pages/api/analyze.js

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Only POST requests are allowed" });
  }

  const { contractText } = req.body;

  if (!contractText || contractText.trim() === "") {
    return res.status(400).json({ error: "SÃ¶zleÅŸme metni belirtilmedi." });
  }

  let analysisResult = [];

  try {
    // Yeni YaklaÅŸÄ±m: Modelden her maddeyi "###Madde X###" ile ayÄ±rarak vermesini isteyeceÄŸiz.
    // Analiz detaylarÄ±nÄ± her madde bloÄŸunun iÃ§ine daha basit formatta isteyeceÄŸiz.
    const newSimplifiedAnalysisPrompt = `
      AÅŸaÄŸÄ±daki sÃ¶zleÅŸme metnini dikkatlice oku. Her bir "Madde X" veya benzeri ifadeyi (Ã¶rn. "Madde 1", "Madde 2", "GiriÅŸ" gibi) ayrÄ± bir sÃ¶zleÅŸme maddesi olarak tanÄ±mla.
      
      Her bir madde iÃ§in, Ã¶nce maddeyi aÅŸaÄŸÄ±daki Ã¶zel formatta ayÄ±r: "###Madde [Numara/AdÄ±]###".
      ArdÄ±ndan, maddenin tam iÃ§eriÄŸini yaz.
      SonrasÄ±nda, o madde iÃ§in TÃ¼rk Hukuku'na gÃ¶re bir hukuki deÄŸerlendirme, uygunluk etiketi ve varsa Ã¶nerilen revize maddeyi aÅŸaÄŸÄ±daki anahtar kelimelerle belirt:
      
      Hukuki DeÄŸerlendirme: [KÄ±sa ve Ã¶z hukuki deÄŸerlendirme]
      Uygunluk Etiketi: [âœ… Uygun Madde | ğŸŸ¡ Riskli Madde | ğŸ”´ GeÃ§ersiz Madde]
      Ã–nerilen Revize Madde: [Riskli veya GeÃ§ersiz ise uygun revize edilmiÅŸ madde metni. Uygunsa "Revize gerekmiyor."]

      **Ã‡ok Ã–nemli Kurallar:**
      1. Ã‡Ä±ktÄ±, sadece analiz metnini iÃ§ermeli. JSON veya baÅŸka bir format kullanma.
      2. Her maddenin baÅŸÄ±nda mutlaka "###Madde [Numara/AdÄ±]###" ayÄ±rÄ±cÄ± etiketini kullan.
      3. Her anahtar kelime (Hukuki DeÄŸerlendirme, Uygunluk Etiketi, Ã–nerilen Revize Madde) yeni bir satÄ±rda baÅŸlasÄ±n.
      4. EÄŸer bir madde baÅŸlÄ±ÄŸÄ± yoksa, "Madde [Numara]###" ÅŸeklinde bÄ±rak. Ã–rneÄŸin: "###Madde 1###".

      Analiz edilecek sÃ¶zleÅŸme metni:
      ${contractText}
      `;

    const responseFromModel = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o", // En gÃ¼ncel model
        messages: [
          {
            role: "system",
            content: "Sen bir TÃ¼rk Hukuku uzmanÄ± yapay zekasÄ±n. GÃ¶revin, kullanÄ±cÄ±nÄ±n verdiÄŸi sÃ¶zleÅŸme metnini, her maddeyi '###Madde X###' formatÄ±yla ayÄ±rarak ve her maddenin altÄ±nda belirtilen anahtar kelimelerle hukuki deÄŸerlendirme, uygunluk etiketi ve revize maddeyi saÄŸlamaktÄ±r. Sadece istenen formatta, net ve aÃ§Ä±klayÄ±cÄ± metin Ã§Ä±ktÄ±sÄ± ver. BaÅŸka hiÃ§bir ÅŸey ekleme."
          },
          { role: "user", content: newSimplifiedAnalysisPrompt }
        ],
        temperature: 0.1, // DÃ¼ÅŸÃ¼k sÄ±caklÄ±k format tutarlÄ±lÄ±ÄŸÄ± iÃ§in
      }),
    });

    const dataFromModel = await responseFromModel.json();

    if (dataFromModel.error) {
      console.error("OpenAI API HatasÄ± (analyze.js):", dataFromModel.error);
      return res.status(dataFromModel.error.status || 500).json({ error: dataFromModel.error.message || "OpenAI API'den analiz sÄ±rasÄ±nda beklenmeyen bir hata alÄ±ndÄ±." });
    }

    const rawAnalysisText = dataFromModel.choices?.[0]?.message?.content || "";

    // BURAYA EKLE: Modelden gelen ham metni konsola yazdÄ±r (hala kalsÄ±n)
    console.log("------------------------------------------");
    console.log("Modelden Gelen Ham Analiz Metni (rawAnalysisText):");
    console.log(rawAnalysisText);
    console.log("------------------------------------------");

    // Modelden gelen metni "###Madde X###" ayracÄ±na gÃ¶re parÃ§alayalÄ±m
    const articleBlocks = rawAnalysisText.split(/(?=###Madde\s(?:[\d.]+)(?:.*?)\s?###)/g);
    
    // Ä°lk eleman genellikle boÅŸ veya giriÅŸ metni olabilir, bu yÃ¼zden filtreleyelim
    const cleanedBlocks = articleBlocks.filter(block => block.trim().startsWith("###Madde "));

    for (const block of cleanedBlocks) {
      let maddeNo = "";
      let maddeBaslik = "";
      let maddeIcerigi = "";
      let hukukiDegerlendirme = "";
      let uygunlukEtiketi = "";
      let onerilenRevizeMadde = "";

      const lines = block.trim().split('\n').map(line => line.trim());
      
      // Ä°lk satÄ±r madde baÅŸlÄ±ÄŸÄ± ve numarasÄ±nÄ± iÃ§eriyor olmalÄ±
      const firstLine = lines.shift(); // Ä°lk satÄ±rÄ± al ve diziden Ã§Ä±kar
      const maddeMatch = firstLine.match(/###Madde\s([\d.]+)(?: - (.*?))?###/);

      if (maddeMatch) {
        maddeNo = maddeMatch[1] || "";
        maddeBaslik = maddeMatch[2] || "";
      } else {
        // EÄŸer format beklenenden farklÄ±ysa, burayÄ± atla veya hata logla
        console.warn("Madde baÅŸlÄ±ÄŸÄ± formatÄ± beklenenden farklÄ±:", firstLine);
        continue; 
      }

      // Geri kalan satÄ±rlarÄ± ayrÄ±ÅŸtÄ±r
      let currentContent = [];
      for (const line of lines) {
        if (line.startsWith("Hukuki DeÄŸerlendirme:")) {
          hukukiDegerlendirme = line.substring("Hukuki DeÄŸerlendirme:".length).trim();
          currentContent = []; // Ä°Ã§erik kÄ±smÄ± bitti
        } else if (line.startsWith("Uygunluk Etiketi:")) {
          uygunlukEtiketi = line.substring("Uygunluk Etiketi:".length).trim();
          currentContent = [];
        } else if (line.startsWith("Ã–nerilen Revize Madde:")) {
          onerilenRevizeMadde = line.substring("Ã–nerilen Revize Madde:".length).trim();
          currentContent = [];
        } else {
          // EÄŸer anahtar kelimelerden biri deÄŸilse ve madde iÃ§eriÄŸi bekleniyorsa
          currentContent.push(line);
        }
      }
      maddeIcerigi = currentContent.join('\n').trim();

      // Ek alanlar iÃ§in varsayÄ±lan deÄŸerler
      const gerekce = hukukiDegerlendirme; // GeÃ§ici olarak deÄŸerlendirmeyi gerekÃ§e yapalÄ±m
      const kanuniDayanak = "Kanuni Dayanak Belirlenemedi"; 
      const yargiKarariOzeti = "Ä°lgili yargÄ± kararÄ± bulunamadÄ±."; 

      analysisResult.push({
        maddeNo: isNaN(parseInt(maddeNo)) ? maddeNo : parseInt(maddeNo), // SayÄ±ya Ã§evir, deÄŸilse string bÄ±rak
        maddeBaslik: maddeBaslik,
        maddeIcerigi: maddeIcerigi,
        hukukiDegerlendirme: hukukiDegerlendirme,
        uygunlukEtiketi: uygunlukEtiketi,
        gerekce: gerekce,
        kanuniDayanak: kanuniDayanak,
        yargiKarariOzeti: yargiKarariOzeti,
        onerilenRevizeMadde: onerilenRevizeMadde,
      });
    }

    res.status(200).json({ analysisResult });

  } catch (error) {
    console.error("Genel sunucu hatasÄ± (analyze.js):", error);
    res.status(500).json({ error: "Sunucu hatasÄ±: " + error.message });
  }
}